<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
    "http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html><style type="text/css"><!--a:link {text-decoration: none; font-family: lucida grande, geneva, helvetica, arial, sans-serif; font-size: small; color: #0000ff;}a:visited {text-decoration: none; font-family: lucida grande, geneva, helvetica, arial, sans-serif; font-size: small; color: #0000ff;}a:visited:hover {text-decoration: underline; font-family: lucida grande, geneva, helvetica, arial, sans-serif; font-size: small; color: #ff6600;}a:active {text-decoration: none; font-family: lucida grande, geneva, helvetica, arial, sans-serif; font-size: small; color: #ff6600;}a:hover {text-decoration: underline; font-family: lucida grande, geneva, helvetica, arial, sans-serif; font-size: small; color: #ff6600;}h4 {text-decoration: none; font-family: lucida grande, geneva, helvetica, arial, sans-serif; font-size: tiny; font-weight: bold;}body {text-decoration: none; font-family: lucida grande, geneva, helvetica, arial, sans-serif; font-size: 10pt;}--></style><head>
    <title>MuellerM</title>
	 <meta name="generator" content="HeaderDoc">
</head><body bgcolor="#ffffff">
<h1><font face="Geneva,Arial,Helvtica">MuellerM</font></h1><br>
<a name="//apple_ref/doc/class/MuellerM" title="MuellerM"></a>
<h2>Discussion</h2>
The class MuellerM is an abstract class used to obtain the matrix elements of a Mueller matrix.
The goal of this class is to be efficient enough for Monte Carlo calculations.
Hence, the descendants of this class can implement the various calculations using
lookup tables.  The necessary accesor functions are declared in MuellerM.
<br><br>
When this file is compiled with the __NOOPTIMIZE #defined, then "slower" functions are used.
<br><br><hr><br><h2>Member Functions</h2>
<a name="HeaderDoc_functions"></a>
<dl>
<dt><tt><a href="CompositePage.html#//apple_ref/cpp/instm/MuellerM/GetMatrixForTheta/double*double" target="_top">GetMatrixForTheta</a></tt></dt>
<dd></dd>
<dt><tt><a href="CompositePage.html#//apple_ref/cpp/instm/MuellerM/Normalization" target="_top">Normalization</a></tt></dt>
<dd></dd>
<dt><tt><a href="CompositePage.html#//apple_ref/cpp/instm/MuellerM/MaxThetaPhi" target="_top">MaxThetaPhi</a></tt></dt>
<dd></dd>
<dt><tt><a href="CompositePage.html#//apple_ref/cpp/instm/MuellerM/GetAnisotropyCoefficient" target="_top">GetAnisotropyCoefficient</a></tt></dt>
<dd></dd>
</dl>
<hr><!-- headerDoc=instm; uid=//apple_ref/cpp/instm/MuellerM/GetAnisotropyCoefficient; name=MuellerM::GetAnisotropyCoefficient -->
<a name="//apple_ref/cpp/instm/MuellerM/GetAnisotropyCoefficient"></a>
<table border="0"  cellpadding="2" cellspacing="2" width="300"><tr><td valign="top" height="12" colspan="5"><h2><a name="GetAnisotropyCoefficient">GetAnisotropyCoefficient</a></h2>
</td></tr></table><blockquote><pre><tt>public:</tt>
<br>virtual double GetAnisotropyCoefficient(
) ;
</pre></blockquote>
<h5><font face="Lucida Grande,Helvetica,Arial">Discussion</font></h5><p>Returns the anisotropy coefficient as calculated for unpolarized incident light.
</p>
<hr><!-- headerDoc=instm; uid=//apple_ref/cpp/instm/MuellerM/GetMatrixForTheta/double*double; name=MuellerM::GetMatrixForTheta -->
<a name="//apple_ref/cpp/instm/MuellerM/GetMatrixForTheta/double*double"></a>
<table border="0"  cellpadding="2" cellspacing="2" width="300"><tr><td valign="top" height="12" colspan="5"><h2><a name="GetMatrixForTheta">GetMatrixForTheta</a></h2>
</td></tr></table><blockquote><pre><tt>public:</tt>
<br>virtual void GetMatrixForTheta(
    double *inM,
    double inTheta ) = 0;
</pre></blockquote>
<h5><font face="Lucida Grande,Helvetica,Arial">Discussion</font></h5><p>Function to obtain the Mueller matrix of a Rayleigh scatterer for a given scattering angle theta.
<br><br>
</p>
<h5><font face="Lucida Grande,Helvetica,Arial">Parameter Descriptions</font></h5>
<blockquote>
<dl>
<dt><tt><em>inM</em></tt></dt><dd>This parameter contains the Mueller matrix on exit.  The mueller matrix is returned through this parameter (which is a 
double[16] array (if the code is compiled without __NOOPTIMIZE, the default) or double[4][4] array 
(if the code is compiled with __NOOPTIMIZE). The caller must have allocated the array. A few things to know:
matrices: m[row][col], hence using a single index one must do: [4*row+col] == [row][col]</dd>
<dt><tt><em>inTheta</em></tt></dt><dd>Scattering angle requested (in the scattering plane).</dd>
</dl>
</blockquote>
<hr><!-- headerDoc=instm; uid=//apple_ref/cpp/instm/MuellerM/MaxThetaPhi; name=MuellerM::MaxThetaPhi -->
<a name="//apple_ref/cpp/instm/MuellerM/MaxThetaPhi"></a>
<table border="0"  cellpadding="2" cellspacing="2" width="300"><tr><td valign="top" height="12" colspan="5"><h2><a name="MaxThetaPhi">MaxThetaPhi</a></h2>
</td></tr></table><blockquote><pre><tt>public:</tt>
<br>virtual double MaxThetaPhi(
) ;
</pre></blockquote>
<h5><font face="Lucida Grande,Helvetica,Arial">Discussion</font></h5><p>Returns the maximum value of Intensity[theta,0].  The maximum value should be calculated
in the constructor of the matrix.
</p>
<dl><dt><i>function result</i></dt><dd>Maximum factor is : Max[Intensity[theta,0]]
        </dd></dl>
<hr><!-- headerDoc=instm; uid=//apple_ref/cpp/instm/MuellerM/Normalization; name=MuellerM::Normalization -->
<a name="//apple_ref/cpp/instm/MuellerM/Normalization"></a>
<table border="0"  cellpadding="2" cellspacing="2" width="300"><tr><td valign="top" height="12" colspan="5"><h2><a name="Normalization">Normalization</a></h2>
</td></tr></table><blockquote><pre><tt>public:</tt>
<br>virtual double Normalization(
);
</pre></blockquote>
<h5><font face="Lucida Grande,Helvetica,Arial">Discussion</font></h5><p>Returns the normalization factor corresponding to an integral of the intensity distribution
over 2 pi.  The normalization should be calculated in the constructor of the matrix.
</p>
<dl><dt><i>function result</i></dt><dd>normalization factor is : 2 pi Integrate[Intensity[theta,0],{x,0, 2pi}]
        </dd></dl>
<hr>
<h2>Member Data</h2>
<hr><!-- headerDoc=data; uid=//apple_ref/cpp/data/MuellerM/mG; name=MuellerM::mG -->
<a name="//apple_ref/cpp/data/MuellerM/mG"></a>
<table border="0"  cellpadding="2" cellspacing="2" width="300"><tr><td valign="top" height="12" colspan="5"><h2><a name="mG">mG</a></h2>
</td></tr></table><blockquote><tt>protected:</tt> double mG;
</blockquote>
<h5><font face="Lucida Grande,Helvetica,Arial">Discussion</font></h5><p>           Holds the value of "g" (i.e. avg(cosine)) for fast look-up</p>
<hr><!-- headerDoc=data; uid=//apple_ref/cpp/data/MuellerM/mMaxThetaPhi; name=MuellerM::mMaxThetaPhi -->
<a name="//apple_ref/cpp/data/MuellerM/mMaxThetaPhi"></a>
<table border="0"  cellpadding="2" cellspacing="2" width="300"><tr><td valign="top" height="12" colspan="5"><h2><a name="mMaxThetaPhi">mMaxThetaPhi</a></h2>
</td></tr></table><blockquote><tt>protected:</tt> double mMaxThetaPhi;
</blockquote>
<h5><font face="Lucida Grande,Helvetica,Arial">Discussion</font></h5><p>           Contains maximum intensity</p>
<hr><!-- headerDoc=data; uid=//apple_ref/cpp/data/MuellerM/mNormalization; name=MuellerM::mNormalization -->
<a name="//apple_ref/cpp/data/MuellerM/mNormalization"></a>
<table border="0"  cellpadding="2" cellspacing="2" width="300"><tr><td valign="top" height="12" colspan="5"><h2><a name="mNormalization">mNormalization</a></h2>
</td></tr></table><blockquote><tt>protected:</tt> double mNormalization;
</blockquote>
<h5><font face="Lucida Grande,Helvetica,Arial">Discussion</font></h5><p>           Contains normalization factor</p>
<hr>
<p>(Last Updated 2/23/2005)
</p></body></html>
